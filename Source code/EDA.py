import pandas as pd
import matplotlib.pyplot as plt
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
import seaborn as sn
import numpy as np
from scipy.stats import skew, kurtosis 


def eda(filename):
  df = pd.read_csv(filename)
  df=df.drop('_id',axis=1)
  print("Number of datasets: {}".format(len(df)))
  activity_count = df["activity"].value_counts()
  plt.title("Data distribution before sampling", loc='center', y=1.1, fontsize=16)  
  plt.pie(activity_count,radius=1.2,shadow=False, explode=[.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1])
  plt.legend(labels=activity_count.index,bbox_to_anchor=(1.75,1), fontsize=10)
  plt.show()
  print("---------------------------------------------------------------------------------")
  print("Number of Sitting Activity: {}".format(df[df["activity"]=="Sitting"].count()[0]))
  print("Number of Walking Activity: {}".format(df[df["activity"]=="Walking"].count()[0]))
  print("Number of Lying Activity: {}".format(df[df["activity"]=="Lying"].count()[0]))
  print("Number of Standing Activity: {}".format(df[df["activity"]=="Standing"].count()[0]))
  print("Number of ClimbingUpStairs Activity: {}".format(df[df["activity"]=="ClimbingUpStairs"].count()[0]))
  print("Number of ClimbingDownStairs Activity: {}".format(df[df["activity"]=="ClimbingDownStairs"].count()[0]))
  print("Number of Jogging Activity: {}".format(df[df["activity"]=="Jogging"].count()[0]))
  print("Number of AscendingStairs Activity: {}".format(df[df["activity"]=="AscendingStairs"].count()[0]))
  print("Number of Running Activity: {}".format(df[df["activity"]=="Running"].count()[0]))
  print("Number of Driving Activity: {}".format(df[df["activity"]=="Driving"].count()[0]))
  print("Number of MountainDescending Activity: {}".format(df[df["activity"]=="MountainDescending"].count()[0]))
  print("Number of DescendingStairs Activity: {}".format(df[df["activity"]=="DescendingStairs"].count()[0]))
  print("Number of MountainAscending Activity: {}".format(df[df["activity"]=="MountainAscending"].count()[0]))
  print("---------------------------------------------------------------------------------")
  df_without_activity = df.drop('activity', axis=1)
  mean_values = df_without_activity.mean()
  median_values = df_without_activity.median()
  std_values = df_without_activity.std()
  variance_values = df_without_activity.var()
  min_values = df_without_activity.min()
  max_values = df_without_activity.max()
  skew_values = df_without_activity.apply(lambda x: skew(x.dropna()))
  kurtosis_values = df_without_activity.apply(lambda x: kurtosis(x.dropna()))
  print("Mean values:")
  print(mean_values)
  print("---------------------------------------------------------------------------------")
  print("\nMedian values:")
  print(median_values)
  print("---------------------------------------------------------------------------------")
  print("\nStandard deviation values:")
  print(std_values)
  print("---------------------------------------------------------------------------------")
  print("\nVariance values:")
  print(variance_values)
  print("---------------------------------------------------------------------------------")
  print("\nMinimum values:")
  print(min_values)
  print("---------------------------------------------------------------------------------")
  print("\nMaximum values:")
  print(max_values)
  print("---------------------------------------------------------------------------------")
  print("\nskew values:")
  print(skew_values)
  print("\nKurtosis values:")
  print(kurtosis_values)
  print("---------------------------------------------------------------------------------")
  statistics = ['Mean', 'Median', 'Std', 'Min', 'Max']
  column_names=['orX' , 'orY'  , 'orZ' , 'rX' , 'rY' , 'rZ'  , 'accX' , 'accY' , 'accZ'  , 'gX' , 'gY' , 'gZ' , 'mX' , 'mY' , 'mZ'  , 'lux'  , 'soundLevel']
  for col in column_names:
      fig,ax = plt.subplots(figsize=(10, 6))
      x_pos = range(len(statistics))
      values = [mean_values[col], median_values[col], std_values[col], min_values[col], max_values[col]]
      ax.bar(x_pos, values)
      ax.set_xticks(x_pos)
      ax.set_xticklabels(statistics)
      ax.set_title(col)
      plt.xlabel('Statistics')
      plt.ylabel('Values')
      plt.show()
  correlation_matrix = df_without_activity.corr()
  fig,ax = plt.subplots(figsize=(10, 8))
  sn.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
  ax.set_title('Correlation Matrix')
  plt.xticks(rotation=45)
  plt.show()
  X = df.drop('activity', axis=1)
  y = df['activity']
  smote = SMOTE()
  X_resampled, y_resampled = smote.fit_resample(X, y)
  data = pd.concat([X_resampled, y_resampled], axis=1)
  activity_count = data["activity"].value_counts()
  plt.title("Data distribution after SMOTE sampling", loc='center', y=1.1, fontsize=16)  
  plt.pie(activity_count,radius=1.2,shadow=False, explode=[.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1])
  plt.legend(labels=activity_count.index,bbox_to_anchor=(1.75,1), fontsize=10)
  plt.show()
  X = data.drop("activity", axis=1)
  y = data["activity"]
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
  print("================================================================")
  print("Size of X_train: {}".format(len(X_train)))
  print("Size of y_train: {}".format(len(y_train)))
  print("\n")
  print("Size of X_test: {}".format(len(X_test)))
  print("Size of y_test: {}".format(len(y_test)))
  print("\n")
  print("Train proportion: {:.0%}".format(len(X_train)/
                                          (len(X_train)+len(X_test))))
  print("================================================================")
  return X_train, X_test, y_train, y_test